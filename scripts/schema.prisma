datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id           String    @id @default(uuid())
    email        String    @unique
    passwordHash String
    role         UserRole
    firstName    String
    lastName     String
    phoneNumber  String?
    active       Boolean   @default(true)
    lastLogin    DateTime?
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt
    student      Student?
    parent       Parent?
    staff        Staff?
    schoolId     String?   @map("school_id") // Add this field
    school       School?   @relation(fields: [schoolId], references: [id]) // Relation to School

    @@map("users")
}

enum UserRole {
    ADMIN
    TEACHER
    STUDENT
    PARENT
    SUPPORT_STAFF
    IT
}

model Student {
    id               String            @id @default(uuid())
    studentId        String            @unique
    dateOfBirth      DateTime
    gender           String
    address          String
    emergencyContact String?
    medicalInfo      String?
    createdAt        DateTime          @default(now())
    updatedAt        DateTime          @updatedAt
    userId           String            @unique
    user             User              @relation(fields: [userId], references: [id])
    schoolId         String
    school           School            @relation(fields: [schoolId], references: [id])
    admissionStatus  AdmissionStatus   @default(PENDING)
    documents        StudentDocument[]
    parents          StudentParent[]
    classes          Class[]

    @@map("students")
}

model StudentDocument {
    id         String   @id @default(uuid())
    studentId  String
    student    Student  @relation(fields: [studentId], references: [id], onDelete: Cascade)
    fileName   String
    fileUrl    String
    uploadedAt DateTime @default(now())

    @@map("student_documents")
}

enum AdmissionStatus {
    PENDING
    APPROVED
    REJECTED
    ENROLLED
}

model Parent {
    id           String          @id @default(uuid())
    occupation   String?
    relationship String
    createdAt    DateTime        @default(now())
    updatedAt    DateTime        @updatedAt
    userId       String          @unique
    user         User            @relation(fields: [userId], references: [id])
    students     StudentParent[]

    @@map("parents")
}

model StudentParent {
    id        String   @id @default(uuid())
    isPrimary Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    studentId String
    student   Student  @relation(fields: [studentId], references: [id])
    parentId  String
    parent    Parent   @relation(fields: [parentId], references: [id])

    @@unique([studentId, parentId])
    @@map("student_parents")
}

model Class {
    id        String    @id @default(uuid())
    name      String
    active    Boolean   @default(true)
    createdAt DateTime  @default(now())
    updatedAt DateTime  @updatedAt
    schoolId  String
    school    School    @relation(fields: [schoolId], references: [id])
    students  Student[]

    @@map("classes")
}

model School {
    id            String         @id @default(uuid())
    name          String
    address       String
    city          String?
    state         String?
    zipCode       String?
    country       String
    phone         String
    email         String
    website       String?
    createdAt     DateTime       @default(now())
    updatedAt     DateTime       @updatedAt
    departments   Department[]
    classes       Class[]
    academicYears AcademicYear[]
    staff         Staff[]
    students      Student[]
    user          User[]

    @@map("schools")
}

model Department {
    id        String   @id @default(uuid())
    name      String
    schoolId  String
    school    School   @relation(fields: [schoolId], references: [id])
    staff     Staff[]
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("departments")
}

model AcademicYear {
    id        String   @id @default(uuid())
    year      String
    startDate DateTime
    endDate   DateTime
    schoolId  String
    school    School   @relation(fields: [schoolId], references: [id])
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("academic_years")
}

model Staff {
    id           String      @id @default(uuid())
    userId       String      @unique
    user         User        @relation(fields: [userId], references: [id])
    schoolId     String
    school       School      @relation(fields: [schoolId], references: [id])
    departmentId String?
    department   Department? @relation(fields: [departmentId], references: [id])
    role         String
    createdAt    DateTime    @default(now())
    updatedAt    DateTime    @updatedAt

    @@map("staff")
}

// Curriculum Module Models
model Curriculum {
    id          String       @id @default(uuid())
    name        String // e.g., "National Curriculum 2023"
    description String? // Optional description
    gradeLevels GradeLevel[] // One-to-many relation with GradeLevel
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
}

model GradeLevel {
    id           String      @id @default(uuid())
    name         String // e.g., "Grade 1"
    description  String? // Optional description
    curriculumId String?
    curriculum   Curriculum? @relation(fields: [curriculumId], references: [id], onDelete: SetNull)
    subjects     Subject[] // One-to-many relation with Subject
    createdAt    DateTime    @default(now())
    updatedAt    DateTime    @updatedAt
}

model Subject {
    id           String     @id @default(uuid())
    name         String // e.g., "Mathematics"
    gradeLevelId String
    gradeLevel   GradeLevel @relation(fields: [gradeLevelId], references: [id], onDelete: Cascade)
    topics       Topic[] // One-to-many relation with Topic
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt
}

model Topic {
    id         String              @id @default(uuid())
    name       String // e.g., "Algebra"
    subjectId  String
    subject    Subject             @relation(fields: [subjectId], references: [id], onDelete: Cascade)
    objectives LearningObjective[] // One-to-many relation with LearningObjective
    createdAt  DateTime            @default(now())
    updatedAt  DateTime            @updatedAt
}

model LearningObjective {
    id          String              @id @default(uuid())
    description String // e.g., "Solve linear equations"
    topicId     String
    topic       Topic               @relation(fields: [topicId], references: [id], onDelete: Cascade)
    alignments  StandardAlignment[] // One-to-many relation with StandardAlignment
    createdAt   DateTime            @default(now())
    updatedAt   DateTime            @updatedAt
}

model StandardAlignment {
    id          String              @id @default(uuid())
    standardId  String
    standard    EducationalStandard @relation(fields: [standardId], references: [id], onDelete: Cascade)
    objectiveId String
    objective   LearningObjective   @relation(fields: [objectiveId], references: [id], onDelete: Cascade)
    createdAt   DateTime            @default(now())
    updatedAt   DateTime            @updatedAt
}

model EducationalStandard {
    id          String              @id @default(uuid())
    name        String
    description String?
    code        String?
    subject     String?
    createdAt   DateTime            @default(now())
    updatedAt   DateTime            @updatedAt
    alignments  StandardAlignment[]
}
